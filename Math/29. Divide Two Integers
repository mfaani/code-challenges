// https://leetcode.com/problems/divide-two-integers/
// NOT CORRECT SOLUTION BECASUE OF OVERFLOW, but you know what needs to be done...

class Solution {
    func divide(_ dividend: Int, _ divisor: Int) -> Int {
        guard dividend != 0 else { return 0 }
        var dividend = dividend
        var count = 0
        var isSameSign = true
        if dividend == -2147483648 {
            if divisor == 1 {
                return -2147483648    
            } else if divisor == -1 {
                return 2147483647
            }            
        }
        if (dividend > 0 && divisor > 0) || (dividend < 0 && divisor < 0) {
            isSameSign = true
        } else {
            isSameSign = false
        }
        
        
        if isSameSign {
            var divend = abs(dividend)
            let divisor = abs(divisor)
            while divend >= divisor {
                divend -= divisor
                count += 1
            }
        } else {
            var divend = abs(dividend)
            let divisor = abs(divisor)
            while divend >= divisor {
                divend -= divisor
                count -= 1
            }
        }
        
        return count
        
    }
}

// Lessons: With multiplications and dividing, the edges / the thing you have to worry about becomes more about after / before you multiply...
// multiplying by 0,1 become tricky then...they mess up your while loops...
// WHEN There's a big number, then there's ALWAYS an overflow problem. That's what they're looking for. 
// AGAIN READ THE FUCKING QUESTION!!!
// BASICALLY for all math questions: you have to be considerate of overflows. 

/*
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, assume that your function returns 231 − 1 when the division result overflows.

*/
